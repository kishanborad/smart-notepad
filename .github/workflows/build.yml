name: Build and Deploy

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  NODE_ENV: production
  REACT_APP_API_URL: ${{ secrets.REACT_APP_API_URL || 'http://localhost:3000' }}
  BACKEND_API_URL: ${{ secrets.BACKEND_API_URL || 'http://localhost:5050' }}
  HUSKY: 0
  CI: true

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - uses: actions/checkout@v4
      
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          cache: 'npm'

      # Frontend Build
      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm install

      - name: Build frontend
        working-directory: ./frontend
        run: |
          DISABLE_ESLINT_PLUGIN=true npm run build
          if [ ! -d "build" ]; then
            echo "::error::Frontend build directory not created"
            exit 1
          fi

      # Backend Build
      - name: Install backend dependencies
        working-directory: ./backend
        run: npm install

      - name: Build backend
        working-directory: ./backend
        run: |
          npm run build
          if [ ! -d "dist" ]; then
            echo "::error::Backend build directory not created"
            exit 1
          fi

      # Cache build artifacts
      - name: Cache build artifacts
        uses: actions/cache@v4
        with:
          path: |
            frontend/build
            backend/dist
          key: ${{ runner.os }}-build-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-build-

  deploy:
    needs: build
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          cache: 'npm'

      # Restore build artifacts
      - name: Restore build artifacts
        uses: actions/cache@v4
        with:
          path: |
            frontend/build
            backend/dist
          key: ${{ runner.os }}-build-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-build-

      # Deploy Frontend to Vercel
      - name: Deploy Frontend
        id: deploy-frontend
        working-directory: ./frontend
        run: |
          if [ -d "build" ] && [ -n "${{ secrets.VERCEL_TOKEN }}" ]; then
            npm install -g vercel
            DEPLOYMENT_URL=$(vercel deploy --prod --token ${{ secrets.VERCEL_TOKEN }} --yes)
            echo "deployment_url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
          fi

      # Deploy Backend to Heroku
      - name: Deploy Backend
        id: deploy-backend
        working-directory: ./backend
        run: |
          if [ -d "dist" ] && [ -n "${{ secrets.HEROKU_API_KEY }}" ]; then
            npm install -g heroku
            heroku auth:token ${{ secrets.HEROKU_API_KEY }}
            git remote add heroku https://heroku:${{ secrets.HEROKU_API_KEY }}@git.heroku.com/${{ secrets.HEROKU_APP_NAME }}.git
            git push heroku HEAD:main -f
            echo "backend_url=https://${{ secrets.HEROKU_APP_NAME }}.herokuapp.com" >> $GITHUB_OUTPUT
          fi

      # Verify Deployments
      - name: Verify Deployments
        run: |
          if [ -n "${{ steps.deploy-frontend.outputs.deployment_url }}" ]; then
            curl -s -o /dev/null -w "%{http_code}" ${{ steps.deploy-frontend.outputs.deployment_url }}
          fi
          if [ -n "${{ steps.deploy-backend.outputs.backend_url }}" ]; then
            curl -s -o /dev/null -w "%{http_code}" ${{ steps.deploy-backend.outputs.backend_url }}/health
          fi 